
#ifndef TIMERS_IP_H
#define TIMERS_IP_H


/****************** Include Files ********************/
#include "xil_types.h"
#include "xparameters.h"
#include "xstatus.h"

#define TIMERS_IP_IDTASK_OFFSET 0
#define TIMERS_IP_START_OFFSET 4
#define TIMERS_IP_STOP_OFFSET 8
#define TIMERS_IP_CHANGEPERIOD_OFFSET 12
#define TIMERS_IP_ADDRESS_OFFSET 16
#define TIMERS_IP_PERIOD_OFFSET 20
#define TIMERS_IP_PERIOD_AUTORELOAD_OFFSET 24

//READ
#define TIMERS_IP_TIMERID_OFFSET 20
#define TIMERS_IP_TIMERADDR_OFFSET 24
#define TIMERS_IP_EXPIRETIME_OFFSET 28


/**************************** Type Definitions *****************************/
/**
 *
 * Write a value to a TIMERS_IP register. A 32 bit write is performed.
 * If the component is implemented in a smaller width, only the least
 * significant data is written.
 *
 * @param   BaseAddress is the base address of the TIMERS_IPdevice.
 * @param   RegOffset is the register offset from the base to write to.
 * @param   Data is the data written to the register.
 *
 * @return  None.
 *
 * @note
 * C-style signature:
 * 	void TIMERS_IP_mWriteReg(u32 BaseAddress, unsigned RegOffset, u32 Data)
 *
 */
#define TIMERS_IP_mWriteReg(BaseAddress, RegOffset, Data) \
  	Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))

/**
 *
 * Read a value from a TIMERS_IP register. A 32 bit read is performed.
 * If the component is implemented in a smaller width, only the least
 * significant data is read from the register. The most significant data
 * will be read as 0.
 *
 * @param   BaseAddress is the base address of the TIMERS_IP device.
 * @param   RegOffset is the register offset from the base to write to.
 *
 * @return  Data is the data from the register.
 *
 * @note
 * C-style signature:
 * 	u32 TIMERS_IP_mReadReg(u32 BaseAddress, unsigned RegOffset)
 *
 */
#define TIMERS_IP_mReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))

/************************** Inline Function Prototypes ****************************/

static inline u8 createTimer(u32 addrtimer, u32 period, _Bool autoreload)
{
	Xil_Out32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, (autoreload)? TIMERS_IP_PERIOD_AUTORELOAD_OFFSET : TIMERS_IP_PERIOD_OFFSET, period);
	Xil_Out32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_ADDRESS_OFFSET, addrtimer);

	return Xil_In32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_TIMERID_OFFSET);
}

static inline void setTimerTask(u8 idtimertask)
{
	Xil_Out32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_IDTASK_OFFSET, idtimertask);
}

static inline u32 startTimer(u8 idtimer)
{
	Xil_Out32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_START_OFFSET, idtimer);
	return Xil_In32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_EXPIRETIME_OFFSET);
}

static inline void stopTimer(u8 idtimer)
{
	Xil_Out32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_STOP_OFFSET, idtimer);
}

static inline void setPeriodTimer(u8 idtimer, u32 period)
{
	Xil_Out32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_PERIOD_OFFSET, period);
	Xil_Out32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_CHANGEPERIOD_OFFSET, idtimer);
}

static inline u32 getTimer( void )
{
	return Xil_In32(XPAR_TIMERS_IP_0_S00_AXI_BASEADDR, TIMERS_IP_TIMERADDR_OFFSET);
}

#endif // TIMERS_IP_H
